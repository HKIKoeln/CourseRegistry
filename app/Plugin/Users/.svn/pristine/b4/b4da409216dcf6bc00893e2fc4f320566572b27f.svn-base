<?php
App::uses('UsersAppModel', 'Users.Model');

class User extends UsersAppModel {

	public $name = 'User';


	public $displayField = 'email';

	// 60*60*24 = 86400
	public $emailTokenExpirationTime = 86400;
	
	
	
	public $validate = array(
		/*
		'username' => array(
			'required' => array(
				'rule' => array('notEmpty'),
				'required' => true, 'allowEmpty' => false,
				'message' => 'Please enter a username.'
			),
			'alpha' => array(
				'rule' => array('alphaNumeric'),
				'message' => 'The username must be alphanumeric.'
			),
			'unique_username' => array(
				'rule' => array('isUnique', 'username'),
				'message' => 'This username is already in use.'
			),
			'username_min' => array(
				'rule' => array('minLength', '3'),
				'message' => 'The username must have at least 3 characters.'
			)
		),
		*/
		'email' => array(
			'isValid' => array(
				'rule' => 'email',
				'required' => true,
				'message' => 'Please enter a valid email address.'
			),
			'isUnique' => array(
				'rule' => array('isUnique', 'email'),
				'message' => 'This email is already in use.'
			)
		),
		'password' => array(
			'too_short' => array(
				'rule' => array('minLength', '6'),
				'message' => 'The password must have at least 6 characters.'
			),
			'required' => array(
				'rule' => 'notEmpty',
				'message' => 'Please enter a password.'
			)
		)
	);
	
	
	
	
	
	public function findByEmail($email = null) {
		if(empty($email)) return false;
		return $this->find('first', array(
			'contain' => array(),
			'conditions' => array(
				$this->alias . '.email' => $email,
				$this->alias . '.active' => 1
			)
		));
	}
	
	
	public function requestNewPassword($email = null) {
		$user = $this->findByEmail($email);
		if(!empty($user) && $user[$this->alias]['email_verified'] == 1) {
			$expiry = time() + $this->emailTokenExpirationTime;
			$token = $this->generateToken('password_token');
			$data = array();
			$data[$this->alias]['id'] = $user[$this->alias]['id'];
			$data[$this->alias]['password_token'] = $token;
			$data[$this->alias]['password_token_expires'] = date('Y-m-d H:i:s', $expiry);
			$data = $this->save($data, false);
			if($data) {
				$user[$this->alias] = array_merge($user[$this->alias], $data[$this->alias]);
				$this->data = $user;
				return $user;
			}
		}elseif(!empty($user) && $user[$this->alias]['email_verified'] == 0) {
			$this->invalidate('email', 'This Email Address exists but was never validated.');
		}else{
			$this->invalidate('email', 'This Email Address does not exist in the system.');
		}
		return false;
	}
	
	
	public function generateToken($fieldname = null, $length = 16) {
		$time = substr((string)time(), -6, 6);
		$possible = '0123456789abcdefghijklmnopqrstuvwxyz';
		// create an unique token
		for($c = 1; $c > 0; ) {
			$token = '';
			for($i = 0; $i < $length - 6; $i++) {
				$token .= substr($possible, mt_rand(0, strlen($possible) - 1), 1);
			}
			$token = $time . $token;
			if(empty($fieldname)) break;
			$c = $this->find('count', array('conditions' => array(
				$this->alias . '.' . $fieldname => $token
			)));
		}
		return $token;
	}
	
	
	public function checkPasswordToken($token = null) {
		if(empty($token)) return false;
		$user = $this->find('first', array(
			'contain' => array(),
			'conditions' => array(
				$this->alias . '.active' => 1,
				$this->alias . '.password_token' => $token,
				$this->alias . '.email_token_expires >=' => date('Y-m-d H:i:s')
			)
		));
		if(empty($user)) return false;
		return $user;
	}
	
	
	public function resetPassword($postData = array()) {
		$result = false;
		$tmp = $this->validate;
		$this->validate = array('new_password' => $this->validate['password']);
		$this->set($postData);
		if ($this->validates() AND !empty($this->data[$this->alias][$this->primaryKey])) {
			App::uses('Security', 'Utility');
			$hash = Security::hash(
				$string = $this->data[$this->alias]['new_password'], 
				$type = null,
				$salt = true
			);
			// make sure we're not saving anything else than the password!
			$data[$this->alias][$this->primaryKey] = $this->data[$this->alias][$this->primaryKey];
			$data[$this->alias]['password'] = $hash;
			$data[$this->alias]['password_token'] = null;
			$result = $this->save($data, array(
				'validate' => false,
				'callbacks' => false)
			);
		}
		$this->validate = $tmp;
		return $result;
	}
	
	
	
	
	
	
	
	

}
